  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
  #include <arpa/inet.h>
  #define PORT 8080
  #define BUFFER_SIZE 256
  
  void handleError(const char *message) {
     perror(message);
     exit(EXIT_FAILURE);
}
 
  int registerUser(int sockfd) {
    
     char username[50], password[100];
     
     printf("Enter username: ");
     scanf("%s", username);
     printf("Enter password: ");
     scanf("%s", password);
 
     char buffer[BUFFER_SIZE];
     sprintf(buffer, "REGISTER %s %s", username, password);
     send(sockfd, buffer, strlen(buffer), 0);
     recv(sockfd, buffer, BUFFER_SIZE, 0);
      printf("%s\n", buffer);
      
      int n=0;
      // printf("\nregister executed\n");
        printf("\n***** OPTIONS *****\n");
        printf("1. Login\n");                //(for new users)
        printf("2. Unregister\n");            //(for registered users)    
        printf("3. Make a call\n");         //(for registered users)
        printf("4. Display log file\n");     //client becomes caller
        printf("5. Exit");                //(for registered users)
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &n);
        switch(n){
            case 1:
            n=3;
            break;
            case 2:
            n=2;
            break;
            case 3:
            n=7;
            break;
            case 4:
            n=8;
            break;
            case 5:
            n=10;
            break;
        }
        return n;
  }
  
  int unregisterUser(int sockfd){
    int n=0;
    char c;
    printf("\nunregister executed\n");
    printf("\nAre you sure you want to unregister?(y/n)\n");
    getchar();
    scanf("%c", &c);
    if(c=='y'||c=='Y'){
        
        //write fn here
    char username[50], password[100];
    
    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    char buffer[BUFFER_SIZE];
    sprintf(buffer, "UNREGISTER %s %s", username, password);
    send(sockfd, buffer, strlen(buffer), 0);
    recv(sockfd, buffer, BUFFER_SIZE, 0);
    printf("%s\n", buffer);
        
    //printf("\nUnregistered successfully\n");
    
 
    }
    else if(c=='n'||c=='N'){
        printf("\nYou have entered that you do not wish to unregister.\n");
    
    }
    else{
        printf("\nInvalid choice. Please try again.\n");
        
    }
    n=0;
    return n;
    
} //write fn
  
  int loginUser(int sockfd) {
      char username[50], password[100];
      printf("Enter username: ");
      scanf("%s", username);
      printf("Enter password: ");
      scanf("%s", password);
      char buffer[BUFFER_SIZE];
      sprintf(buffer, "LOGIN %s %s", username, password);
      send(sockfd, buffer, strlen(buffer), 0);
      recv(sockfd, buffer, BUFFER_SIZE, 0);
      printf("%s\n", buffer);
      
      int n=0;
     //printf("\nlogin executed\n");
        printf("\n***** OPTIONS *****\n");
        printf("1. Enable call forwarding\n");         //(for new users)
        printf("2. Disable call forwarding\n");            //(for registered users)    
        printf("3. Unregister\n");       //(for registered users)
        printf("4. Logout\n");       //(for registered users)
        printf("5. Change password\n");       //(for registered users)
        printf("6. Make a call\n");      //client becomes caller
        printf("7. Display log file\n"); //(for registered users)
        printf("8. Exit\n");             //exit the program
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &n);
        switch(n){
            case 1:
            n=5;
            break;
            
            case 2:
            n=6;
            break;
            
            case 3:
            n=2;
            break;
            
            case 4:
            n=4;
            break;
            
            case 5:
            n=9;
            break;
            
            case 6:
            n=7;
            break;
            
            case 7:
            n=8;
            break;
            
            case 8:
            n=10;
            break;
    }
    
    return n;
  }
  
  int activateCallForwarding(int sockfd) {
      char username[50], forwardingType[20], destination[20];
      printf("Enter your username: ");
      scanf("%s", username);
      printf("Enter call forwarding type (e.g., 'Unconditional', 'busy', 'Unanswered'): ");
      scanf("%s", forwardingType);
      printf("Enter destination number: ");
      scanf("%s", destination);
      char buffer[BUFFER_SIZE];
      sprintf(buffer, "ACTIVATE %s %s %s", username, forwardingType, destination);
      send(sockfd, buffer, strlen(buffer), 0);
      recv(sockfd, buffer, BUFFER_SIZE, 0);
      printf("%s\n", buffer);
      
       int n=0;
        //printf("\nenable executed\n");
        printf("\n***** OPTIONS *****\n");
        printf("1. Disable call forwarding\n");         //(for new users)
        printf("2. Unregister\n");       //(for registered users)
        printf("3. Logout\n");       //(for registered users)
        printf("4. Change password\n");       //(for registered users)
        printf("5. Make a call\n");      //client becomes caller
        printf("6. Display log file\n"); //(for registered users)
        printf("7. Exit\n");             //exit the program
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &n);
        switch(n){
            
            case 1:
            n=6;
            break;
            
            case 2:
            n=2;
            break;
            
            case 3:
            n=4;
            break;
            
            case 4:
            n=9;
            break;
            
            case 5:
            n=7;
            break;
            
            case 6:
            n=8;
            break;
            
            case 7:
            n=10;
            break;
            
            default:
            printf("\nPlease enter a valid choice ! \n");
            n=5;
            break;

    }
    return n;
  }
  
  int deactivateCallForwarding(int sockfd) {
     
    char c;
    int n=0;
   // printf("\ndisable executed\n");
    printf("\nAre you sure you want to disable call forwarding?(y/n)\n");
    getchar();
    scanf("%c", &c);
    if(c=='y'||c=='Y'){
        
    char username[50];
    printf("Enter your username: ");
    scanf("%s", username);
    char buffer[BUFFER_SIZE];
    sprintf(buffer, "DEACTIVATE %s", username);
    send(sockfd, buffer, strlen(buffer), 0);
    recv(sockfd, buffer, BUFFER_SIZE, 0);
    printf("%s\n", buffer);
        
    printf("\nCall forwarding deactivated successfully\n");

 
    }
    else if(c=='n'||c=='N'){
        printf("\nYou do not wish to disable call forwarding\n");
        
        printf("\n\n***** OPTIONS *****\n");
        printf("1. Enable call forwarding\n");         //(for new users)
        printf("2. Disable call forwarding\n");            //(for registered users)    
        printf("3. Unregister\n");       //(for registered users)
        printf("4. Logout\n");       //(for registered users)
        printf("5. Change password\n");       //(for registered users)
        printf("6. Make a call\n");      //client becomes caller
        printf("7. Display log file\n"); //(for registered users)
        printf("8. Exit\n");             //exit the program
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &n);
        switch(n){
            case 1:
            n=5;
            break;
            
            case 2:
            n=6;
            break;
            
            case 3:
            n=2;
            break;
            
            case 4:
            n=4;
            break;
            
            case 5:
            n=9;
            break;
            
            case 6:
            n=7;
            break;
            
            case 7:
            n=8;
            break;
            
            case 8:
            n=10;
            break;
    }
    return n;

    }
    else{
        printf("\nInvalid choice. Please try again.\n");
        n=0;
        return n;
        
    }
   
     
        printf("\n***** OPTIONS *****\n");
        printf("1. Enable call forwarding\n");         //(for new users)
        printf("2. Unregister\n");       //(for registered users)
        printf("3. Logout\n");       //(for registered users)
        printf("4. Change password\n");       //(for registered users)
        printf("5. Make a call\n");      //client becomes caller
        printf("6. Display log file\n"); //(for registered users)
        printf("7. Exit\n");             //exit the program
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &n);
        switch(n){
            
            case 1:
            n=5;
            break;
            
            case 2:
            n=2;
            break;
            
            case 3:
            n=4;
            break;
            
            case 4:
            n=9;
            break;
            
            case 5:
            n=7;
            break;
            
            case 6:
            n=8;
            break;
            
            case 7:
            n=10;
            break;
            
            default:
            printf("\nPlease enter a valid choice ! \n");
            n=6;
            break;

    }
    
    return n;
      
      
  }
  
  int makeCall(int sockfd) {
      
      char caller[50], callee[50];
      printf("Enter your username: ");
      scanf("%s", caller);
      printf("Enter callee username: ");
      scanf("%s", callee);
 
     char buffer[BUFFER_SIZE];
     sprintf(buffer, "CALL %s %s", caller, callee);
     send(sockfd, buffer, strlen(buffer), 0);
     recv(sockfd, buffer, BUFFER_SIZE, 0);
     printf("%s\n", buffer);
     
    int n=0;
    return n;
}

  int displayLogs(int sockfd){
      
      
    char username[50], password[100];
     
    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    char buffer[BUFFER_SIZE];
    sprintf(buffer, "REGISTER %s %s", username, password);
    send(sockfd, buffer, strlen(buffer), 0);
    recv(sockfd, buffer, BUFFER_SIZE, 0);
    printf("%s\n", buffer);
    
    int n=0;
        printf("\ndisplay log file executed\n");
        //ask for username,phn num , password 
        //displays log files then takes user to main menue
        n=0;
        return n;
} //write fn

  int changePassword(int sockfd){
    
    printf("\nchange password executed\n");
    
    char phone_no[10], old_password[100], new_password1[100], new_password2[100];
    
    
    printf("\nEnter your phone number: +91  ");
    scanf("%s", phone_no);
    printf("Enter old password: ");
    scanf("%s", old_password);
    printf("Enter new password: ");
    scanf("%s", new_password1);
    printf("Re-enter new password: ");
    scanf("%s", new_password2);
    
    
    if(strcmp(new_password1,new_password2)==0)
    {
        char buffer[BUFFER_SIZE];
        sprintf(buffer, "CHANGE PASSWORD %s %s", phone_no, new_password1);
        send(sockfd, buffer, strlen(buffer), 0);
        recv(sockfd, buffer, BUFFER_SIZE, 0);
        printf("%s\n", buffer);
        printf("\nPasword changed successfully.\n")
        int n=0;
        return n;
            
    }
    
    
    
    else{
        
        printf("\nEntered passwords do not match.Try again.\n");
        int n=9;
        return n;
    }
    
    

  /*  char buffer[BUFFER_SIZE];
    sprintf(buffer, "REGISTER %s %s", username, password);
    send(sockfd, buffer, strlen(buffer), 0);
    recv(sockfd, buffer, BUFFER_SIZE, 0);
    printf("%s\n", buffer); */
    

} //write fn
 
int main() {
     int sockfd;
     struct sockaddr_in server_addr;
 
     // Create socket
     if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
         handleError("Socket creation failed");
     }
 
     // Define server address
     server_addr.sin_family = AF_INET;
     server_addr.sin_port = htons(PORT);
     server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
 
     // Connect to server
     if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
         handleError("Connection to server failed");
     }
 
     int choice=0;
     while (1) 
     {
         
        if(choice==0)
        {
        printf("\n\n***** OPTIONS *****\n");
        printf("1. Register\n");         //(for new users)
        printf("2. Login\n");            //(for registered users)    
        printf("3. Unregister\n");       //(for registered users)
        printf("4. Make a call\n");      //client becomes caller
        printf("5. Display log file\n"); //(for registered users)
        printf("6. Exit\n");             //exit the program
        printf("\nEnter your choice: ");             //exit the program
        scanf("%d", &choice);
        switch(choice){
            case 1:
            choice=1;
            break;
            
            case 2:
            choice=3;
            break;
            
            case 3:
            choice=2;
            break;
            
            case 4:
            choice=7;
            break;
            
            case 5:
            choice=8;
            break;
            
            case 6:
            choice=10;
            break;

            default:
            printf("\nPlease enter a valid choice ! \n");
            choice=0;
        }
    }
 
        if(choice==1)
        {
             
             choice=registerUser(sockfd);
         }
         
        if(choice==2)
        {  //write its function
        
       choice=unregisterUser(sockfd);
       
        }
             
        if(choice==3)
        {
             
             choice=loginUser(sockfd);
             
            
         } 
        
        if(choice==4)
        {
        //logout
        printf("\nLogging out of the system ...\n");
        
        sleep(2);
        
        printf("\nSuccessfully logged out.\n");
        choice=0;
    }
    
        if(choice==5)
        {
        //enable
        choice=activateCallForwarding(sockfd);
        
    }
    
        if(choice==6)
        {
        //disable
       choice=deactivateCallForwarding(sockfd);
  
    }
    
        if(choice==7)
        {
            
        choice=makeCall(sockfd);
        
        } 
        
        if(choice==8)
        { 
            //write func
        choice=displayLogs(sockfd);
        
        }
        
        if(choice==9)
        {  //write function
      choice=changePassword(sockfd);
        
        }
        
         
        if (choice==10)
        {
             
        printf("\nExiting the system...\n");
        sleep(2);
        printf("\nSuccessfully exited.\n");
        close(sockfd);
        exit(EXIT_SUCCESS);
        break;
        } 
         
        
     }
     
}
 
     