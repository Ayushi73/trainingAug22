***************************************************** ARRAYS ****************************************************

// Write a program to find the transpose of a given 2D array (matrix).
#include <stdio.h>
#define MAX 2
int main() {
    
    int arr[MAX][MAX];//2D array
    
    printf("Enter upto 4 elements of the matrix\n");
    
    // input elements into the matrix
    for(int i = 0 ; i <MAX ; i++)
    {
        for(int j = 0 ; j <MAX ; j++)
        {
            scanf("%d", &arr[i][j]);
        }
    }
    
    //print the matrix
    printf("\nYour matrix is : \n");
    for(int i = 0 ; i <MAX ; i++)
    {
        for(int j = 0 ; j <MAX ; j++)
        {
            printf("%d\t", arr[i][j]);
        }
        printf("\n");
    }
       
    //printing transpose of the matrix
    printf("\nYour transpose matrix is : \n");    
    for(int i = 0 ; i <MAX ; i++)
    {
        for(int j = 0 ; j <MAX ; j++)
        {
            printf("%d\t", arr[j][i]);
        }
        printf("\n");
    }    
        


    return 0;
}


-------------------------------------------------------------------------------------------------------------



//Write a program to count the occurrences of each element in an array.

#include<stdio.h>
#include<stdlib.h>
#define MAX 5
int main()
{
    int arr[MAX], freq[MAX];
    printf("Enter %d elements of the array\n", MAX);
    
    //input the elements
    for(int i=0; i<MAX; i++)
    {
        scanf("%d", &arr[i]);
        freq[i]=-1;
    }
    
    //printing the array
    printf("Your input array is : \n");
    for(int i=0; i<MAX; i++)
    {
        printf("%d ", arr[i]);
    }
    
    //printing the frequency array
    printf("\nYour frequency array is : \n");
    for(int i=0; i<MAX; i++)
    {
        printf("%d ", freq[i]);
    }
    
    printf("\n");
    
    //check occurence
    for(int i=0; i<MAX; i++)
    {
        int ctr=0;
        if(freq[i]==-1)
        {
            for(int j=0; j<MAX; j++)
            {
                if(arr[i]==arr[j]){
                ctr++;
                freq[j]=0;
                }
            }
            freq[i]=ctr;
        }
    }
    
    //printing the array
    //printf("Your input array is : \n")
    for(int i=0; i<MAX; i++)
    {
        if(freq[i]!=0)
        {   if(freq[i]!=1){
            printf("%d appears %d times\n", arr[i], freq[i]);
        }
        
        else if(freq[i]==1){
            printf("%d appears only once\n", arr[i]);
        }
        }
    }
    
    return EXIT_SUCCESS;
}


---------------------------------------------------------------------------------------------------------------




//Write a program to remove duplicate elements from an array.

#include<stdio.h>
#include<stdlib.h>
#define MAX 7
int main()
{
    int arr[MAX], freq[MAX];
    printf("Enter %d elements of the array\n", MAX);
    
    //input the elements
    for(int i=0; i<MAX; i++)
    {
        scanf("%d", &arr[i]);
        freq[i]=-1;
    }
    
    //printing the array
    printf("\nYour input array is : \n");
    for(int i=0; i<MAX; i++)
    {
        printf("%d ", arr[i]);
    }
    
    printf("\n\n");
    
    //check for duplicates
    for(int i=0; i<MAX; i++)
    { int ctr=1;
    
    if(freq[i]!=0){
        
        for(int j=0; j<MAX ; j++)
        {
            
            if(arr[i]==arr[j])
            {
                ctr++;
                freq[j]=0;
            }
            
            freq[i]=ctr;
        }
        
    
    
    }
    }
    
    printf("\nArray with duplicate elements removed: \n");
    for(int i=0; i<MAX; i++)
    {
        if(freq[i]!=0)
            {
                printf("%d ", arr[i]);
                
            }
    }
    
    return EXIT_SUCCESS;
}

-------------------------------------------------------------------------------------------------------------



//Write a program to find the second largest element in an array.

#include<stdio.h>
#include<stdlib.h>
#define MAX 10
int main()
{
    int arr[MAX], freq[MAX];
    printf("Enter %d elements of the array\n", MAX);
    
    //input the elements
    for(int i=0; i<MAX; i++)
    {
        scanf("%d", &arr[i]);
        freq[i]=-1;
    }
    
    //printing the array
    printf("\nYour input array is : \n");
    for(int i=0; i<MAX; i++)
    {
        printf("%d ", arr[i]);
    }
    
    printf("\n\n");
    
    //check for duplicates
    for(int i=0; i<MAX; i++)
    { 
        
        for(int j=1+i; j<MAX ; j++)
        {
            
            if(arr[i]==arr[j])
            {
                arr[j]=0;
            }
            
    }
    
    }
    printf("\n");
    printf("Duplicates set to zero\n");
    for(int j=0; j<MAX ; j++)
        {
            
            printf("%d ", arr[j]);
            
            
        }
            printf("\n");

    //bubble sort
    for(int j=0; j<MAX ; j++)
        {
            for(int i=1+j; i<MAX ; i++)
        {
           if(arr[j]<arr[i])
            {   
                //swap
                int temp;
                temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
            }
        }

        }
    //printing sorted array
    printf("\nSorted array in descending order: \n");
    for(int i=0; i<MAX ; i++)
        {
           printf("%d ", arr[i]);
        }
      printf("\n");
      
      printf("\nSecond largest element of the array is: %d", arr[1]);

   
    return EXIT_SUCCESS;
}


******************************************* STRINGS **********************************************************

//WAP to get the position of a substring in a string.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 20

int main()
{   char str[MAX], sub_str[MAX];
    int len;
    int sub_len;
    
    printf("\nEnter the string    : ");
    
    if(fgets(str, MAX, stdin)!=NULL)
        {
           
            len=strlen(str);
            if(str[len-1]=='\n'){
                str[len-1]='\0';
            }
           
            printf("\nThe input string is : ");
            if(!fputs(str, stdout)){
                printf("Error in fputs.");
                return 2;
            }
            
            
        }
    
    printf("\n\nEnter the sub-string: ");
         if(fgets(sub_str, MAX, stdin)!=NULL)
        {
            
            sub_len=strlen(sub_str);
            if(sub_str[sub_len-1]=='\n'){
                sub_str[sub_len-1]='\0';
            }
            
            printf("\nThe sub-string is   : ");
            if(!fputs(sub_str, stdout)){
                printf("Error in fputs.");
                return 2;
            }
            
        char *ptr=strstr(str, sub_str);
        if(ptr!=NULL){
           printf("\nSub-string found at position %d\n", ptr-str+1);
        }
        else{
            printf("\nSub-string not found.\n");
        }
            return 0;
        }
        
    return EXIT_SUCCESS;
}

-----------------------------------------------------------------------------------------------------

//WAP to reverse the given string.
//WAP to reverse the given line

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 20

int main()
{   char str[MAX];
    int len;
   
    
    printf("\nEnter the string    : ");
    
    if(fgets(str, MAX, stdin)!=NULL)
        {
            len=strlen(str);
            if(str[len-1]=='\n'){
                str[len-1]='\0';
            }
           
            printf("\nThe input string is : ");
            if(!fputs(str, stdout)){
                printf("Error in fputs.");
                return 2;
            }
        }
    
    len=strlen(str);   
    char rev_str[len];  
    
    for(int i =0; i < len; i++){
        
        rev_str[i]=str[len-i-1];
    }
    
    rev_str[len]='\0';
    
    
    
          printf("\nThe reversed string is : ");
            if(!fputs(rev_str, stdout)){
                printf("Error in fputs.");
                return 2;
            }  
       

        
    return EXIT_SUCCESS;
}

UPLOAD TO PUTTY

-----------------------------------------------------------------------------------------------------------------------------------------------
//Write a program to check if two strings are anagrams of each other.
#include <stdio.h>
#include <string.h>
#define MAX 100
int main() 
    {
        
    char str1[MAX], str2[MAX];
    
    printf("\nEnter string 1:\t");
     int len1;
    if(fgets(str1, MAX, stdin)!=NULL)
    { 
       
        len1=strlen(str1);
        if(str1[len1]=='\n')
            str1[len1]='\0';
        
        printf("\nString 1:\t");
        if(!fputs(str1, stdout)){
        printf("Error with fputs");
        return 1;
            
        }
        
    }
    
    printf("\nEnter string 2:\t");
    int len2;
    if(fgets(str2, MAX, stdin)!=NULL)
    { 
        
        len2=strlen(str2);
        if(str2[len2]=='\n')
            str2[len2]='\0';
        
        printf("\nString 2:\t");
        if(!fputs(str2, stdout)){
        printf("Error with fputs");
        return 1;
            
        }
        
    }
    
    if(len1==len2)
    {
    
    //store ascii values of str1    
    int arr1[len1];
        for(int i=0; i<len1; i++)
        {
            arr1[i]=(int)str1[i];
        }
    
    
    //print arr1
 //   printf("\narr1: ");
 //   for(int i =0; i<len1; i++){
 //       printf("%d ", arr1[i]);
 //   }
 //   printf("\n");
    
    
    //store ascii values of str2
    int arr2[len2];
        for(int i=0; i<len2; i++)
        {
            arr2[i]=(int)str2[i];
        }
        
        
     //print arr2
//    printf("\narr2: ");
//    for(int i =0; i<len2; i++){
//        printf("%d ", arr2[i]);
//    }
//    printf("\n");
    
    
        
    //bubble sort arr1
    for(int i=0; i<len1; i++)
        {
            for(int j=0; j<len1-1; j++)
                {
                   if(arr1[j]>arr1[j+1]){
                       int tmp=0;
                       tmp=arr1[j];
                       arr1[j]=arr1[j+1];
                       arr1[j+1]=tmp;
                     
                   } 
                }
                
        }
        
         //print sorted arr1
  //  printf("\nsorted arr1: ");
  //  for(int i =0; i<len1; i++){
  //      printf("%d ", arr1[i]);
  //  }
  //  printf("\n");
        
        
        
        
        
    //bubble sort arr2
    for(int i=0; i<len2; i++)
        {
            for(int j=0; j<len2-1; j++)
                {
                   if(arr2[j]>arr2[j+1]){
                       int tmp=0;
                       tmp=arr2[j];
                       arr2[j]=arr2[j+1];
                       arr2[j+1]=tmp;
                     
                   } 
                }
            
        }  
        
        //print sorted arr2
   // printf("\nsorted arr2: ");
   // for(int i =0; i<len2; i++){
   //     printf("%d ", arr2[i]);
   // }
   // printf("\n");
    
        
        
        
        
    
     int ctr=0;
     for(int i=0; i<len1; i++)
        {
             if(arr1[i]==arr2[i])
             {
                 ctr++;
             }  
             
        }
        
       //// printf("Ctr: %d\n", ctr);
        
        if(ctr==len1)
        {
            printf("\n\t******Status: Given strings are anagrams.******\n");
            
        }
        
        else
        {
            printf("\n\t******Status: Given strings are not anagrams.******\n");
        }
    
    
    
    
    
    }
    
    
    else
    {
        printf("\n\t******Status: Given strings are not anagrams.******\n");
        
    }
    
    printf("\n\n");
    return 0;
}

UPLOAD TO PUTTY

----------------------------------------------------------------------------------------------------------------------------------

/*Write a program to check if a given string is a palindrome or not.*/

#include <stdio.h>
#include<string.h>
#define MAX 20

int main()
{   char str[MAX];
    printf("Enter your string: ");
    if(fgets(str, MAX, stdin)!=NULL){
        int len;
        len=strlen(str);
        if(str[len-1]=='\n'){
            str[len-1]='\0';
        }
        printf("Your string is : ");
        if(!fputs(str, stdout)){
            printf("\nError with fputs.");
		return 1;
        }
        
    }
    int len =strlen(str);
    //printf("\nlen: %d\n", len);
    char rev[len+1];
    
    rev[len]='\0';
    for(int i=0; i<len; i++){
        rev[i]=str[len-i-1];
    }
    
   // printf("\nrev: ");
   // if(!fputs(rev, stdout)){
   //         printf("\nError with fputs.");
   //     }
   
    int ctr=0;
    
    for(int i=0; i<len; i++){
        if(str[i]==rev[i]){
            ctr++;
        }
        
    }
    
    if(ctr==len){
        printf("\n\n****** Status: Palindrome ******\n");
    }
    
    else{
        printf("\n\n****** Status: Not Palindrome ******\n");
        
    }
    
    
    
    
    
    
    
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------
/*Write a program to sort an array of strings in lexicographic (dictionary) order.*/
 
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 20
 
int main(){
    int n;
    
    printf("Enter the number of strings: ");
    scanf("%d", &n);
    
    
    printf("Enter %d strings", n);
    
    char **words;
    words=(char**)malloc(n*sizeof(char*));
    
    printf("\nEnter the words: ");
    
    for(int i=0; i<n; i++)
    {
        words[i]=(char*)malloc(MAX*sizeof(char));
        scanf("%s", words[i]);
        getchar();
    }
    
    printf("\n\nYour words are: \n\n");
    for(int i=0; i<n; i++){
        if(!fputs(words[i], stdout)){
            printf("\nError with fputs.\n");
        return 1;
        }
        printf("\n");
    }

   for(int i=0; i<n-1; i++)
    {
       for(int j=1; j<n-i-1; j++)
    {
     
            int result;
            result=strcmp(words[j],words[j+1]);
            
            if(result>0){
                
                //swap
                char *tmp;
                tmp=words[j];
                words[j]=words[j+1];
                words[j+1]=tmp;
                
            }
           
    }

    }

   
     printf("\n\nSorted words: \n\n");
    for(int i=0; i<n; i++){
        if(!fputs(words[i], stdout)){
            printf("\nError with fputs.\n");
        return 1;
        }
        printf("\n");
        free(words[i]);
    }
        free(words);



    return EXIT_SUCCESS;
}

-----------------------------------------------------------------------------------------------------------------

/*1. You are given a string, str.
You need to find the score of str as per the following rules:
1) For each palindrome of length 4 in str, add 5 to the score
2) For each palindrome of length 5 in str, add 10 to the score
 
It is given that palindromes can overlap within str. However, the characters of the palindrome must be
continuous and must NOT be circular (i.e. they must NOT wrap around the end of the string.
 
Output the final value of score.
 
Notes:
• A palindrome is a word, phrase, or sequence that reads the same backwards as forwards.
Examples of palindromes are words like "madam", "racecar", "abCba" and "aBccBa", and "ABBA"
• Palindromes are case-sensitive in this problem (e.g. "Madam" and "ABCcba" are NOT palindromes)
• The score is initially 0
• There are no whitespaces in str.*/

#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#define MAX 20

int main(){
    char str[MAX];
    printf("Enter the string: ");
    if(fgets(str, MAX, stdin)!=NULL){
        
        int len=strlen(str);
        if(str[len-1]=='\n'){
            str[len-1]='\0';
        }
        
        printf("\nYour string is  : ");
        if(!fputs(str, stdout)){
            printf("error with fputs");
            return 1;
        }
        printf("\n\n");
    }
    
    int len = strlen(str);
    int score=0;
    
    for(int i=0; i<=len-4; i++)
    {
        char comp1[5];
        char revcomp1[5];
        
        comp1[4]='\0';
        revcomp1[4]='\0';

        for(int j=0; j<4; j++)
        {
        
        comp1[j]=str[i+j];
        
        }
       
       
       for(int k=0; k<4; k++)
        {
            revcomp1[k]=comp1[4-1-k];
        }
      
      if(strcmp(comp1,revcomp1)==0){
          score=score+5;
      }
      
    }
    
    for(int i=0; i<=len-5; i++)
    {
        char comp2[6];
        char revcomp2[6];
        
        comp2[5]='\0';
        revcomp2[5]='\0';

        for(int j=0; j<5; j++)
        {
        
        comp2[j]=str[i+j];
        
        }
       
       
       for(int k=0; k<5; k++)
        {
            revcomp2[k]=comp2[5-1-k];
        }
      
      if(strcmp(comp2,revcomp2)==0){
          score=score+10;
      }
      
    }
    
    printf("\nScore: %d", score);
    

    return EXIT_SUCCESS;
}

-----------------------------------------------------------------------------------------------------------

/*2. Write a C program to remove from last occurrence of a word in given string
Example:-
Input string: I am a programmer. I learn at Codeforwin.
Input word to remove: I
Output:
String after removing last occurrence of 'I':
I am a programmer.  learn at Codeforwin*/

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 50

int main(){
    
    char str[MAX];
    int len;
    printf("Enter string: ");
    
    if (fgets(str, MAX, stdin)!=NULL)
    {
         len=strlen(str);
        if(str[len-1]=='\n')
        {
            str[len-1]='\0';
        }
       
    }
    int str_len=strlen(str);
    
    char revstr[str_len];
    for(int i=0; i<str_len; i++){
        revstr[str_len-i-1]=str[i];
    }
    revstr[str_len]='\0';
    //fputs(revstr, stdout);//reversed string





    char substr[MAX];
    int substr_len;
    printf("\nEnter sub-string to be removed: ");
    if (fgets(substr, MAX, stdin)!=NULL)
    {
         substr_len=strlen(substr);
        if(substr[substr_len-1]=='\n')
        {
            substr[substr_len-1]='\0';
        }
    }

    substr_len=strlen(substr);
    
    
    
    char revsub[substr_len];
    for(int i=0; i<substr_len; i++){
        revsub[substr_len-i-1]=substr[i];
    }
    revsub[substr_len]='\0';
    
   // fputs(revsub, stdout);//reversed sub string
    
    int ctr=0;
    int foundIndex=-1;
    char comp[MAX];
    
    for(int i=0; i<str_len; i++)
    {
        if(ctr==0)
        {   
            
            for(int k=0; k<substr_len; k++)
            {
                comp[k]=revstr[i+k];
                
            }
           comp[substr_len]='\0';
           
           if(strncmp(comp,substr,substr_len)==0){
               
                ctr++;
                foundIndex=i;
           }
           
           
           
        }
    
    }
    
    for(int k=foundIndex; k<foundIndex+substr_len; k++)
    {
        revstr[k]=' ';
        
    }
    
    //printf("New revstr: \n");
    //fputs(revstr, stdout);
    
    printf("String after removing last occurence of %s: ", substr);
    for(int i=str_len; i>=0; i--){
        
        printf("%c", revstr[i]);
        
    }
   
    return 0;
    
}


-----------------------------------------------------------------------------------------------------------------

/*3. Write a C program to replace first occurrence of a character with another character in a string.
Example
 
Input
 
Input string: I love programming.
Input character to replace: .
Input character to replace with: !
 
Output
 
String after replacing '.' with '!': I love programming!*/

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 50

void replace(char str[], char ch, char rep){
    int ctr=0;
    
    for(int i=0; i<strlen(str); i++){
        
        if(ctr==0)
        {
            if(str[i]==ch)
            {
                str[i]=rep;
                ctr++;
            }
        }
        
        
    }
    
    if(!fputs(str, stdout)){
        printf("Error with fputs");
        //return 1;
    }
    
}


int main(){
    
    char str[MAX];
    int len;
    printf("Enter input string: ");
    if(fgets(str, MAX, stdin)!=NULL){
        len=strlen(str);
        if(str[len-1]=='\n'){
            str[len-1]='\0';
        }
        
        
        printf("\nInput string: ");
        if(!fputs(str, stdout)){
            printf("Error with fputs");
            return 1;
        }
    }
    len=strlen(str);
    
    char ch;
    printf("\nEnter character to replace: ");
    scanf("%c", &ch);
    getchar();
    
    char rep;
    printf("\nEnter character to be replaced with: ");
    scanf("%c", &rep);
    
    replace(str,ch,rep);
    
    return 0;
    
}
    


********************************************** STRUCTURES ********************************************************

/* Practice Questions on Structures
1. Write a program to define a structure called Student with members: name, age, and grade. Create an instance of this structure and take input from the user for each member, then print the values.*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 20

struct Student
{
  char name[MAX];
  int age;
  char grade;
};
typedef struct Student STUDENT_INFO;

int main() {
    STUDENT_INFO s;
    
    printf("\nEnter name of the student: ");
    if(fgets(s.name, MAX, stdin)!=NULL)
        {
            int len;
            len=strlen(s.name);
            if(s.name[len-1]=='\n'){
                s.name[len-1]='\0';
            }
           
        }
    
    
    printf("\nEnter age of the student: ");
    scanf("%d", &s.age);
    
    printf("\nEnter grade of the student: ");
    scanf(" %c", &s.grade);
    
    printf("\n\n**********************STUDENT INFORMATION**********************\n");
    
    printf("\nName  : ");
            if(!fputs(s.name, stdout)){
                printf("Error in fputs.");
                return 2;
            }
        
    printf("\nAge   : %d\n", s.age);
    printf("Grade : %c\n", s.grade);

    return 0;
}

-------------------------------------------------------------------------------------------------------------
/* 2. Create a structure Book with members: title, author, and price. 
Create an array of 5 books and take input from the user for each book's details. 
Finally, print the details of all books. */
#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 50
 
struct Book{
    char title[MAX];
    char author[MAX];
    int price;
};
 
typedef struct Book BOOK_INFO;
 
int main()
{
    BOOK_INFO books[5];
    
    for(int i = 0 ; i < 5 ; i++){
        printf("\n\nEnter title of book-%d  : ", i+1);
       if(fgets(books[i].title, MAX, stdin)!=NULL)
       {
           int len=strlen(books[i].title);
           if(books[i].title[len-1]=='\n'){
               books[i].title[len-1]='\0';
           }
       } 
       
       // scanf("%s", &books[i]->title);
        printf("\nEnter author of book-%d : ", i+1);
        //scanf("%s", &books[i]->author);
        if(fgets(books[i].author, MAX, stdin)!=NULL)
       {
           int auth_len=strlen(books[i].author);
           if(books[i].author[auth_len-1]=='\n'){
               books[i].author[auth_len-1]='\0';
           }
       }
 
        printf("\nEnter price of book-%d  : ", i+1);
        scanf("%d", &books[i].price);
        getchar();
 
        
        //books[i]=(BOOK_INFO)malloc(MAX*sizeof(BOOK_INFO));
    }
    
    for(int i = 0 ; i < 5 ; i++){
        
        printf("\n\nBook %d info : ", i+1);
        
        printf("\nTitle : ");
        if(!fputs(books[i].title, stdout)){
            printf("Error with fputs");
            return 1;
            
        }
        
        printf("\nAuthor: ");
        if(!fputs(books[i].author, stdout)){
            printf("Error with fputs");
            return 1;
            
        }
        
        printf("\nPrice : ");
        printf("%d", books[i].price);
            
        
        
        
    }

    
 
    return 0;
}

--------------------------------------------------------------------------------------------------------------

/* 3. Create a structure Employee with members id, name, and salary. 
Write a function that takes an employee structure as an argument and prints its members. */

#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 50


 
struct Employee{
    char members_id[MAX];
    char name[MAX];
    float salary;
};
 
typedef struct Employee EMPLOYEE_INFO;

void printMembers(EMPLOYEE_INFO e1){
    printf("\n\n*****Employee information*****\n\n");
    
    printf("Employee ID    : %s\n",e1.members_id );
    
    printf("Employee name  : %s\n",e1.name);
    
    printf("Employee salary: %.2fLPA\n",e1.salary);

}
 
int main()
{
    EMPLOYEE_INFO e1;
    
    int idlen;
    printf("\nEnter employee id: ");
    if(fgets(e1.members_id, MAX, stdin)!=NULL){
        
        idlen=strlen(e1.members_id);
        if(e1.members_id[idlen-1]=='\n'){
            (e1.members_id[idlen-1]='\0');
        }
    }
    idlen=strlen(e1.members_id);
    
    
    int namelen;
    printf("\nEnter employee name: ");
    if(fgets(e1.name, MAX, stdin)!=NULL){
        
        namelen=strlen(e1.name);
        if(e1.name[namelen-1]=='\n'){
            (e1.name[namelen-1]='\0');
        }
    }
    namelen=strlen(e1.name);
    
    printf("\nEnter employee salary(in LPA): ");
    scanf("%f", &e1.salary);
    getchar();
    
    
    
    printMembers(e1);

    
 
    return 0;
}